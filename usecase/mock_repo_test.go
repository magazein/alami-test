// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository/interface.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAfterEodRepoItf is a mock of AfterEodRepoItf interface.
type MockAfterEodRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockAfterEodRepoItfMockRecorder
}

// MockAfterEodRepoItfMockRecorder is the mock recorder for MockAfterEodRepoItf.
type MockAfterEodRepoItfMockRecorder struct {
	mock *MockAfterEodRepoItf
}

// NewMockAfterEodRepoItf creates a new mock instance.
func NewMockAfterEodRepoItf(ctrl *gomock.Controller) *MockAfterEodRepoItf {
	mock := &MockAfterEodRepoItf{ctrl: ctrl}
	mock.recorder = &MockAfterEodRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAfterEodRepoItf) EXPECT() *MockAfterEodRepoItfMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockAfterEodRepoItf) Find(idx int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", idx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAfterEodRepoItfMockRecorder) Find(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAfterEodRepoItf)(nil).Find), idx)
}

// Replace mocks base method.
func (m *MockAfterEodRepoItf) Replace(data [][]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Replace", data)
}

// Replace indicates an expected call of Replace.
func (mr *MockAfterEodRepoItfMockRecorder) Replace(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockAfterEodRepoItf)(nil).Replace), data)
}

// Update mocks base method.
func (m *MockAfterEodRepoItf) Update(idx int, row []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", idx, row)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAfterEodRepoItfMockRecorder) Update(idx, row interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAfterEodRepoItf)(nil).Update), idx, row)
}

// WriteCSV mocks base method.
func (m *MockAfterEodRepoItf) WriteCSV() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCSV")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCSV indicates an expected call of WriteCSV.
func (mr *MockAfterEodRepoItfMockRecorder) WriteCSV() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCSV", reflect.TypeOf((*MockAfterEodRepoItf)(nil).WriteCSV))
}

// MockBeforeEodRepoItf is a mock of BeforeEodRepoItf interface.
type MockBeforeEodRepoItf struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeEodRepoItfMockRecorder
}

// MockBeforeEodRepoItfMockRecorder is the mock recorder for MockBeforeEodRepoItf.
type MockBeforeEodRepoItfMockRecorder struct {
	mock *MockBeforeEodRepoItf
}

// NewMockBeforeEodRepoItf creates a new mock instance.
func NewMockBeforeEodRepoItf(ctrl *gomock.Controller) *MockBeforeEodRepoItf {
	mock := &MockBeforeEodRepoItf{ctrl: ctrl}
	mock.recorder = &MockBeforeEodRepoItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBeforeEodRepoItf) EXPECT() *MockBeforeEodRepoItfMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBeforeEodRepoItf) Get() ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBeforeEodRepoItfMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBeforeEodRepoItf)(nil).Get))
}
